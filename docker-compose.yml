services:
  db:
    image: postgres:16-alpine
    profiles: ['app']
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # ports: ["5432:5432"]
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 3s
      timeout: 3s
      retries: 30
    volumes:
      - dbdata:/var/lib/postgresql/data
    restart: unless-stopped

  seed:
    build:
      context: .
      target: builder
    profiles: ['app']
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    command:
      - sh
      - -c
      - |
        TABLE_COUNT=$(psql "$DATABASE_URL" -tAc "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public'");
        if [ "$TABLE_COUNT" -eq 0 ]; then
          echo "ðŸ”„ Database is empty, running initial seed..."
          yarn seed
        else
          echo "âœ… Database already initialized, skipping seed."
        fi
    restart: 'no'

  api:
    build:
      context: .
      target: runner
    profiles: ['app']
    depends_on:
      seed:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PORT: ${PORT}
    ports: ['${API_PORT_HOST}:${PORT}']
    healthcheck:
      test:
        ['CMD-SHELL', 'wget -qO- http://localhost:${PORT}/api/health || exit 1']
      interval: 5s
      timeout: 3s
      start_period: 20s
      retries: 30
    init: true
    restart: unless-stopped

  # ---- E2E test runner ----
  db-test:
    image: postgres:16-alpine
    profiles: ['e2e']
    env_file:
      - .env.test
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 2s
      timeout: 2s
      retries: 40
    tmpfs: ['/var/lib/postgresql/data:rw'] # ephemeral DB

  # run migrations during e2e tests to ensure migrations are correct
  migrate-test:
    build:
      context: .
      target: builder
    profiles: ['e2e']
    depends_on:
      db-test:
        condition: service_healthy
    env_file: [.env.test]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-test:5432/${POSTGRES_DB}
    command: ['yarn', 'mikro:migrate']
    restart: 'no'

  seed-test:
    build:
      context: .
      target: builder
    profiles: ['e2e']
    depends_on:
      migrate-test:
        condition: service_completed_successfully
    env_file: [.env.test]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-test:5432/${POSTGRES_DB}
    command: ['yarn', 'seed']
    restart: 'no'

  api-test:
    build:
      context: .
      target: runner
    profiles: ['e2e']
    depends_on:
      seed-test:
        condition: service_completed_successfully
    env_file: [.env.test]
    environment:
      NODE_ENV: test
      PORT: ${PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-test:5432/${POSTGRES_DB}
    expose: ['${PORT:-3000}']
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -qO- http://localhost:${PORT:-3000}/api/health || exit 1',
        ]
      interval: 4s
      timeout: 3s
      retries: 30
      start_period: 15s

  test:
    build:
      context: .
      target: tester
    profiles: ['e2e']
    depends_on:
      api-test:
        condition: service_healthy
    env_file: [.env.test]
    environment:
      NODE_ENV: test
      API_BASE_URL: http://api-test:${PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db-test:5432/${POSTGRES_DB}

volumes:
  dbdata:
